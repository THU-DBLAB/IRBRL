{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5b89\u88dd \u00b6 \u53ea\u517c\u5bb9linux \u6838\u5fc3(system)\u6a21\u5f0f\u904b\u505a\u7684openvswitch:Open vSwitch \u7248\u672c\u8981\u9ad8\u65bc2.10 ,Linux kernel\u7248\u672c\u8981\u9ad8\u65bc4.15\u624d\u652f\u63f4meter table user space \u6a21\u5f0f\u904b\u505a\u7684openvswitch:Open vSwitch \u7248\u672c\u8981\u9ad8\u65bc2.7,\u4e26\u4e14\u8981\u52a0\u4e0aDPDK(Data Plane Development Kit)\u624d\u80fd\u9806\u5229\u904b\u4f5c \u5b89\u88dd\u4f9d\u8cf4\u51fd\u6578\u5eab \u00b6 for cpython \u00b6 sudo pip3 install -r requirements.txt for pypy \u00b6 \u63a8\u85a6pypy \u6548\u80fd\u9ad85\u500d sudo pypy3 -m pip install -r requirements.txt \u4fee\u6539linux veth\u9a45\u52d5\u7a0b\u5f0f \u00b6 Note \u76ee\u7684:\u70ba\u4e86\u5f97\u5230\u6b63\u78ba\u4ea4\u63db\u6a5f\u7db2\u5361\u901f\u5ea6\u4ee5\u8a08\u7b97\u8a72\u93c8\u8def\u5269\u9918\u983b\u5bec\u6709\u591a\u5c11 \u7576\u521d\u9047\u5230miniet\u5728\u6a21\u64ec\u7684\u6642\u5019\u7121\u6cd5\u4fee\u6539\u500b\u5225veth\u4ea4\u63db\u6a5f\u7db2\u5361\u8cc7\u8a0a,\u5c0e\u81f4Openvswitch\u56de\u50b3curr_speed(Kbps)\u90fd\u662f\u56fa\u5b9a\u6578\u503c,\u7121\u6cd5\u5b8c\u7f8e\u6a21\u64ec\u4e0d\u540c\u7db2\u901f\u7684\u4ea4\u63db\u6a5f,\u5728\u4e0a\u50b3OFPMP_PORT_DESC\u6642\u6709\u4e0d\u540c \u7684\"curr\"(\u8acb\u7ffb\u95b1openflow1.5.1\u898f\u683c\u66f869\u9801\u7684ofp_port_features\u6709\u8a73\u7d30\u4ecb\u7d39)\u8207\"curr_speed\" \u5617\u8a66\u4e86ethtool\u4e5f\u7121\u6cd5\u4fee\u6b63port \u8cc7\u8a0a \u7531\u65bclinux veth\u9a45\u52d5\u7a0b\u5f0f\u7121\u6cd5\u4fee\u6539port\u4ea4\u63db\u6a5f\u7684\u901f\u5ea6\u8207\u652f\u6301\u7684\u6240\u4ee5\u6211\u5011\u9700\u8981\u4fee\u6539veth\u7684\u9a45\u52d5\u7a0b\u5f0f. \u5b89\u88ddethtool \u00b6 \u4e0b\u8f09\u539f\u59cb\u78bc\u4e26\u89e3\u58d3\u7e2e \u00b6 \u539f\u59cb\u78bc\u7db2\u7ad9:https://mirrors.edge.kernel.org/pub/software/network/ethtool/ \u9032\u5165ethtool\u539f\u59cb\u78bc \u00b6 ./configure make make install \u6e2c\u8a66 \u00b6 \u555f\u52d5mininet\u4e00\u500b\u62d3\u6a38 ifconfig\u5f8c\u67e5\u8a62openvswitch\u4ea4\u63db\u6a5f\u7684interface name,\u8209\u4f8bs1-eth1 \u57f7\u884c\u9019\u6bb5\u6307\u4ee4\u53ef\u4ee5\u767c\u73fe\u8a2d\u5b9a\u5931\u6557 \u56e0\u70baveth\u9a45\u52d5\u7a0b\u5f0f\u4e0d\u5141\u8a31\u6211\u5011\u8a2d\u5b9aveth\u7684\u6578\u503c,\u6240\u4ee5\u6211\u5011\u9808\u8981\u4fee\u6539\u9a45\u52d5\u7a0b\u5f0f\u7684\u7a0b\u5f0f\u78bc sudo ethtool -s s1-eth1 speed 100 \u4fee\u6539veth.c \u00b6 \u67e5\u8a62\u81ea\u5df1linux kernel\u7248\u672c \u00b6 uname -a \u6211\u7684\u6838\u5fc3\u662f4.19.66\u4f60\u7684\u53ef\u80fd\u8ddf\u6211\u4e0d\u4e00\u6a23 Linux ML 4.19.66-1-MANJARO #1 SMP PREEMPT Fri Aug 9 18:01:53 UTC 2019 x86_64 GNU/Linux \u6839\u64da\u4f60\u6838\u5fc3\u7248\u672c\u4e0b\u8f09veth\u539f\u59cb\u78bc \u00b6 \u4e00\u5b9a\u8981\u8ddf\u4f60\u6838\u5fc3\u7248\u672c\u4e00\u6a23,\u4e0d\u7136\u53ef\u80fd\u767c\u751f\u932f\u8aa4 \u5e95\u4e0b\u76844.19.66\u6539\u6210\u4f60\u7684\u6838\u5fc3\u7248\u672c \u4e0b\u8f09\u4f60\u81ea\u5df1\u7248\u672c\u7684veth.c wget https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/plain/drivers/net/veth.c?h = v4.19.66 -O veth.c \u958b\u59cb\u4fee\u6539\u9a45\u52d5\u7a0b\u5f0f \u4ee5\u4e0b\u4fee\u6539\u90fd\u662f\u5728veth.c\u6a94\u6848,\u63a5\u4e0b\u4f86\u90fd\u585e\u5165\u6a19\u793a\u9ec3\u8272\u90e8\u4efd\u7684\u7a0b\u5f0f\u78bc Singly linked list \u00b6 \u5148\u5ba3\u544aSingly linked list\u5be6\u505a\u7684\u65b9\u6cd5 /* * drivers/net/veth.c * * Copyright (C) 2007 OpenVZ http://openvz.org, SWsoft Inc * * Author: Pavel Emelianov <xemul@openvz.org> * Ethtool interface from: Eric W. Biederman <ebiederm@xmission.com> * */ #include <linux/netdevice.h> #include <linux/slab.h> #include <linux/ethtool.h> #include <linux/etherdevice.h> #include <linux/u64_stats_sync.h> #include <net/rtnetlink.h> #include <net/dst.h> #include <net/xfrm.h> #include <net/xdp.h> #include <linux/veth.h> #include <linux/module.h> #include <linux/bpf.h> #include <linux/filter.h> #include <linux/ptr_ring.h> #include <linux/bpf_trace.h> #define DRV_NAME \"veth\" #define DRV_VERSION \"1.0\" #define VETH_XDP_FLAG BIT(0) #define VETH_RING_SIZE 256 #define VETH_XDP_HEADROOM (XDP_PACKET_HEADROOM + NET_IP_ALIGN) /* Separating two types of XDP xmit */ #define VETH_XDP_TX BIT(0) #define VETH_XDP_REDIR BIT(1) typedef struct node { struct node * next ; int ifindex ; struct ethtool_link_settings veth_ethtool ; } Node ; typedef struct list { Node * head ; } List ; static List list ; static Node * node ; static int node_number = 0 ; Node * create_node ( int value ) { Node * node = ( Node * ) vmalloc ( sizeof ( Node )); node -> next = NULL ; node -> ifindex = value ; node -> veth_ethtool . speed = SPEED_10000 ; node -> veth_ethtool . duplex = DUPLEX_FULL ; node -> veth_ethtool . port = PORT_TP ; return node ; } Node * get_node ( List * list , int ifindex ) { Node * innode = list -> head ; while ( innode != NULL ) { if ( innode -> ifindex == ifindex ) { return innode ; } innode = innode -> next ; } return node ; } static int remove_list_node_by_key ( List * list , int ifindex ) { Node * node = ( list -> head ); if ( node -> ifindex == ifindex ) { list -> head = node -> next ; vfree ( node ); node_number = node_number - 1 ; return 0 ; } while ( node != NULL ) { Node * next_node = node -> next ; if ( next_node != NULL ) { if ( next_node -> ifindex == ifindex ) { node -> next = node -> next -> next ; vfree ( next_node ); node_number = node_number - 1 ; return 0 ; } } else { return - 1 ; } node = node -> next ; } return - 1 ; } \u53ef\u4ee5\u770b\u770bethtool_link_settings struct \u53ef\u4ee5\u8a2d\u5b9a\u7684\u53c3\u6578 \u7531\u65bc\u6211\u53ea\u5728\u4e4e\u8a2d\u5b9aspeed,duplex,port\u9019\u5e7e\u500b\u53c3\u6578\u6240\u4ee5,veth_get_link_ksettings,veth_set_link_ksettings\u53ea\u5be6\u505a\u9019\u5e7e\u500b,\u5982\u679c\u6709\u7279\u6b8a\u9700\u6c42\u7684\u4eba\u53ef\u4ee5\u81ea\u5df1\u52a0 \u5728linux \u539f\u59cb\u78bc linux/include/uapi/linux/ethtool.h https://github.com/torvalds/linux/blob/a2d79c7174aeb43b13020dd53d85a7aefdd9f3e5/include/uapi/linux/ethtool.h#L1848 struct ethtool_link_settings { __u32 cmd ; __u32 speed ; __u8 duplex ; __u8 port ; __u8 phy_address ; __u8 autoneg ; __u8 mdio_support ; __u8 eth_tp_mdix ; __u8 eth_tp_mdix_ctrl ; __s8 link_mode_masks_nwords ; __u8 transceiver ; __u8 reserved1 [ 3 ]; __u32 reserved [ 7 ]; __u32 link_mode_masks [ 0 ]; /* layout of link_mode_masks fields: * __u32 map_supported[link_mode_masks_nwords]; * __u32 map_advertising[link_mode_masks_nwords]; * __u32 map_lp_advertising[link_mode_masks_nwords]; */ }; #endif /* _LINUX_ETHTOOL_H */ veth_open \u00b6 linux \u5728\u555f\u52d5veth \u6703\u547c\u53ebveth_open,\u4ee5ifindex\u7576\u4f5ckey,\u5728link list\u4e2d\u65b0\u589e\u4e00\u500b\u7bc0\u9ede \u585e\u5165\u6a19\u793a\u9ec3\u8272\u90e8\u4efd\u7684\u7a0b\u5f0f\u78bc static int veth_open ( struct net_device * dev ) { struct veth_priv * priv = netdev_priv ( dev ); struct net_device * peer = rtnl_dereference ( priv -> peer ); int err ; if ( ! peer ) return - ENOTCONN ; if ( priv -> _xdp_prog ) { err = veth_enable_xdp ( dev ); if ( err ) return err ; } if ( peer -> flags & IFF_UP ) { netif_carrier_on ( dev ); netif_carrier_on ( peer ); } if ( node_number == 0 ) { node = list . head = create_node ( dev -> ifindex ); } else { node -> next = create_node ( dev -> ifindex ); node = node -> next ; } node_number = node_number + 1 ; return 0 ; } veth_close \u00b6 linux \u5728\u95dc\u9589veth \u6703\u547c\u53ebveth_close,\u4ee5ifindex\u7576\u4f5ckey,\u5728link list\u4e2d\u522a\u9664\u8a72\u7bc0\u9ede \u585e\u5165\u6a19\u793a\u9ec3\u8272\u90e8\u4efd\u7684\u7a0b\u5f0f\u78bc static int veth_close ( struct net_device * dev ) { struct veth_priv * priv = netdev_priv ( dev ); struct net_device * peer = rtnl_dereference ( priv -> peer ); netif_carrier_off ( dev ); if ( peer ) netif_carrier_off ( peer ); if ( priv -> _xdp_prog ) veth_disable_xdp ( dev ); remove_list_node_by_key ( & list , dev -> ifindex ); return 0 ; } veth_get_link_ksettings \u00b6 \u9019\u88e1\u662fveth\u9a45\u52d5\u5728\u56de\u7b54\u786c\u9ad4\u53c3\u6578\u7684\u5730\u65b9 \u6539\u6389\u9019\u88e1\u7684\u7a0b\u5f0f\u78bc\u8b8a\u6210\u4e0b\u9762\u9019\u6a23 static int veth_get_link_ksettings ( struct net_device * dev , struct ethtool_link_ksettings * cmd ) { Node * node = get_node ( & list , dev -> ifindex ); cmd -> base . speed = node -> veth_ethtool . speed ; cmd -> base . duplex = node -> veth_ethtool . duplex ; cmd -> base . port = node -> veth_ethtool . port ; return 0 ; } veth_ethtool_ops \u00b6 \u8a3b\u518aveth_ethtool_ops \u6839\u64da ethtool.h \u7684\u539f\u59cb\u78bc\u6211\u5011\u53ef\u4ee5\u77e5\u9053ethtool\u7684set_link_ksettings\u5176\u5be6\u662f\u53ef\u4ee5\u8a2d\u5b9a\u53c3\u6578\u4f46\u662fveth.c\u6c92\u6709\u5be6\u505a\u51fa\u4f86,\u6240\u4ee5\u6211\u5011\u525b\u525b\u624d\u7121\u6cd5\u8a2d\u5b9a \u6240\u4ee5\u5fc5\u9808\u586b\u5165.set_link_ksettings =veth_set_link_ksettings, \u7b49\u7b49\u5728\u5be6\u505aveth_set_link_ksettings static const struct ethtool_ops veth_ethtool_ops = { . set_link_ksettings = veth_set_link_ksettings , . get_drvinfo = veth_get_drvinfo , . get_link = ethtool_op_get_link , . get_strings = veth_get_strings , . get_sset_count = veth_get_sset_count , . get_ethtool_stats = veth_get_ethtool_stats , . get_link_ksettings = veth_get_link_ksettings , }; veth_set_link_ksettings \u00b6 \u5be6\u505aveth_set_link_ksettings ethtool.h \u88e1\u9762\u6709\u898f\u5b9a\u51fd\u6578\u8f38\u5165\u578b\u614b static int veth_set_link_ksettings ( struct net_device * dev , const struct ethtool_link_ksettings * cmd ) { Node * node = get_node ( & list , dev -> ifindex ); node -> veth_ethtool . speed = cmd -> base . speed ; node -> veth_ethtool . duplex = cmd -> base . duplex ; node -> veth_ethtool . port = cmd -> base . port ; return 0 ; } \u64b0\u5bebMakefile \u00b6 \u65b0\u589e\u6a94\u6848\u547d\u540dMakefile \u6ce8\u610f\u8907\u88fd\u7684\u6642\u5019\u6709\u53ef\u80fdtab\u8b8a\u6210space\u5c0e\u81f4\u7121\u6cd5\u7de8\u8b6f Makefile obj-m += veth.o all : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) modules clean : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) clean \u7de8\u8b6f\u9a45\u52d5\u7a0b\u5f0f \u00b6 \u505a\u5230\u9019\u88e1\u4f60\u6709\u5169\u500b\u6a94\u6848veth.c \u8207 Makefile \u57f7\u884c\u4e4b\u5f8c\u53ef\u4ee5\u770b\u5230\u7522\u751fveth.ko\u6a94\u6848 make \u5982\u679c\u539f\u672c\u5c31\u6709veth\u9a45\u52d5\u7a0b\u5f0f \u8acb\u522a\u9664 sudo rmmod veth \u9019\u908a\u5b89\u88dd\u9a45\u52d5\u7a0b\u5f0f sudo insmod veth.ko \u6e2c\u8a66 \u00b6 \u555f\u52d5mininet\u4e00\u500b\u62d3\u6a38 ifconfig\u5f8c\u67e5\u8a62openvswitch\u4ea4\u63db\u6a5f\u7684interface name,\u8209\u4f8bs1-eth1 \u5148\u67e5\u8a62s1-eth1\u7684\u8cc7\u8a0a sudo ethtool s1-eth1 \u4fee\u8a72s1-eth1 post\u901f\u5ea6 sudo ethtool -s s1-eth1 speed 100 \u53ef\u4ee5\u767c\u73fe\u771f\u7684\u53ef\u4ee5\u4fee\u6539\u4e86!!","title":"\u5b89\u88dd"},{"location":"#_1","text":"\u53ea\u517c\u5bb9linux \u6838\u5fc3(system)\u6a21\u5f0f\u904b\u505a\u7684openvswitch:Open vSwitch \u7248\u672c\u8981\u9ad8\u65bc2.10 ,Linux kernel\u7248\u672c\u8981\u9ad8\u65bc4.15\u624d\u652f\u63f4meter table user space \u6a21\u5f0f\u904b\u505a\u7684openvswitch:Open vSwitch \u7248\u672c\u8981\u9ad8\u65bc2.7,\u4e26\u4e14\u8981\u52a0\u4e0aDPDK(Data Plane Development Kit)\u624d\u80fd\u9806\u5229\u904b\u4f5c","title":"\u5b89\u88dd"},{"location":"#_2","text":"","title":"\u5b89\u88dd\u4f9d\u8cf4\u51fd\u6578\u5eab"},{"location":"#for-cpython","text":"sudo pip3 install -r requirements.txt","title":"for cpython"},{"location":"#for-pypy","text":"\u63a8\u85a6pypy \u6548\u80fd\u9ad85\u500d sudo pypy3 -m pip install -r requirements.txt","title":"for pypy"},{"location":"#linux-veth","text":"Note \u76ee\u7684:\u70ba\u4e86\u5f97\u5230\u6b63\u78ba\u4ea4\u63db\u6a5f\u7db2\u5361\u901f\u5ea6\u4ee5\u8a08\u7b97\u8a72\u93c8\u8def\u5269\u9918\u983b\u5bec\u6709\u591a\u5c11 \u7576\u521d\u9047\u5230miniet\u5728\u6a21\u64ec\u7684\u6642\u5019\u7121\u6cd5\u4fee\u6539\u500b\u5225veth\u4ea4\u63db\u6a5f\u7db2\u5361\u8cc7\u8a0a,\u5c0e\u81f4Openvswitch\u56de\u50b3curr_speed(Kbps)\u90fd\u662f\u56fa\u5b9a\u6578\u503c,\u7121\u6cd5\u5b8c\u7f8e\u6a21\u64ec\u4e0d\u540c\u7db2\u901f\u7684\u4ea4\u63db\u6a5f,\u5728\u4e0a\u50b3OFPMP_PORT_DESC\u6642\u6709\u4e0d\u540c \u7684\"curr\"(\u8acb\u7ffb\u95b1openflow1.5.1\u898f\u683c\u66f869\u9801\u7684ofp_port_features\u6709\u8a73\u7d30\u4ecb\u7d39)\u8207\"curr_speed\" \u5617\u8a66\u4e86ethtool\u4e5f\u7121\u6cd5\u4fee\u6b63port \u8cc7\u8a0a \u7531\u65bclinux veth\u9a45\u52d5\u7a0b\u5f0f\u7121\u6cd5\u4fee\u6539port\u4ea4\u63db\u6a5f\u7684\u901f\u5ea6\u8207\u652f\u6301\u7684\u6240\u4ee5\u6211\u5011\u9700\u8981\u4fee\u6539veth\u7684\u9a45\u52d5\u7a0b\u5f0f.","title":"\u4fee\u6539linux veth\u9a45\u52d5\u7a0b\u5f0f"},{"location":"#ethtool","text":"","title":"\u5b89\u88ddethtool"},{"location":"#_3","text":"\u539f\u59cb\u78bc\u7db2\u7ad9:https://mirrors.edge.kernel.org/pub/software/network/ethtool/","title":"\u4e0b\u8f09\u539f\u59cb\u78bc\u4e26\u89e3\u58d3\u7e2e"},{"location":"#ethtool_1","text":"./configure make make install","title":"\u9032\u5165ethtool\u539f\u59cb\u78bc"},{"location":"#_4","text":"\u555f\u52d5mininet\u4e00\u500b\u62d3\u6a38 ifconfig\u5f8c\u67e5\u8a62openvswitch\u4ea4\u63db\u6a5f\u7684interface name,\u8209\u4f8bs1-eth1 \u57f7\u884c\u9019\u6bb5\u6307\u4ee4\u53ef\u4ee5\u767c\u73fe\u8a2d\u5b9a\u5931\u6557 \u56e0\u70baveth\u9a45\u52d5\u7a0b\u5f0f\u4e0d\u5141\u8a31\u6211\u5011\u8a2d\u5b9aveth\u7684\u6578\u503c,\u6240\u4ee5\u6211\u5011\u9808\u8981\u4fee\u6539\u9a45\u52d5\u7a0b\u5f0f\u7684\u7a0b\u5f0f\u78bc sudo ethtool -s s1-eth1 speed 100","title":"\u6e2c\u8a66"},{"location":"#vethc","text":"","title":"\u4fee\u6539veth.c"},{"location":"#linux-kernel","text":"uname -a \u6211\u7684\u6838\u5fc3\u662f4.19.66\u4f60\u7684\u53ef\u80fd\u8ddf\u6211\u4e0d\u4e00\u6a23 Linux ML 4.19.66-1-MANJARO #1 SMP PREEMPT Fri Aug 9 18:01:53 UTC 2019 x86_64 GNU/Linux","title":"\u67e5\u8a62\u81ea\u5df1linux kernel\u7248\u672c"},{"location":"#veth","text":"\u4e00\u5b9a\u8981\u8ddf\u4f60\u6838\u5fc3\u7248\u672c\u4e00\u6a23,\u4e0d\u7136\u53ef\u80fd\u767c\u751f\u932f\u8aa4 \u5e95\u4e0b\u76844.19.66\u6539\u6210\u4f60\u7684\u6838\u5fc3\u7248\u672c \u4e0b\u8f09\u4f60\u81ea\u5df1\u7248\u672c\u7684veth.c wget https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/plain/drivers/net/veth.c?h = v4.19.66 -O veth.c \u958b\u59cb\u4fee\u6539\u9a45\u52d5\u7a0b\u5f0f \u4ee5\u4e0b\u4fee\u6539\u90fd\u662f\u5728veth.c\u6a94\u6848,\u63a5\u4e0b\u4f86\u90fd\u585e\u5165\u6a19\u793a\u9ec3\u8272\u90e8\u4efd\u7684\u7a0b\u5f0f\u78bc","title":"\u6839\u64da\u4f60\u6838\u5fc3\u7248\u672c\u4e0b\u8f09veth\u539f\u59cb\u78bc"},{"location":"#singly-linked-list","text":"\u5148\u5ba3\u544aSingly linked list\u5be6\u505a\u7684\u65b9\u6cd5 /* * drivers/net/veth.c * * Copyright (C) 2007 OpenVZ http://openvz.org, SWsoft Inc * * Author: Pavel Emelianov <xemul@openvz.org> * Ethtool interface from: Eric W. Biederman <ebiederm@xmission.com> * */ #include <linux/netdevice.h> #include <linux/slab.h> #include <linux/ethtool.h> #include <linux/etherdevice.h> #include <linux/u64_stats_sync.h> #include <net/rtnetlink.h> #include <net/dst.h> #include <net/xfrm.h> #include <net/xdp.h> #include <linux/veth.h> #include <linux/module.h> #include <linux/bpf.h> #include <linux/filter.h> #include <linux/ptr_ring.h> #include <linux/bpf_trace.h> #define DRV_NAME \"veth\" #define DRV_VERSION \"1.0\" #define VETH_XDP_FLAG BIT(0) #define VETH_RING_SIZE 256 #define VETH_XDP_HEADROOM (XDP_PACKET_HEADROOM + NET_IP_ALIGN) /* Separating two types of XDP xmit */ #define VETH_XDP_TX BIT(0) #define VETH_XDP_REDIR BIT(1) typedef struct node { struct node * next ; int ifindex ; struct ethtool_link_settings veth_ethtool ; } Node ; typedef struct list { Node * head ; } List ; static List list ; static Node * node ; static int node_number = 0 ; Node * create_node ( int value ) { Node * node = ( Node * ) vmalloc ( sizeof ( Node )); node -> next = NULL ; node -> ifindex = value ; node -> veth_ethtool . speed = SPEED_10000 ; node -> veth_ethtool . duplex = DUPLEX_FULL ; node -> veth_ethtool . port = PORT_TP ; return node ; } Node * get_node ( List * list , int ifindex ) { Node * innode = list -> head ; while ( innode != NULL ) { if ( innode -> ifindex == ifindex ) { return innode ; } innode = innode -> next ; } return node ; } static int remove_list_node_by_key ( List * list , int ifindex ) { Node * node = ( list -> head ); if ( node -> ifindex == ifindex ) { list -> head = node -> next ; vfree ( node ); node_number = node_number - 1 ; return 0 ; } while ( node != NULL ) { Node * next_node = node -> next ; if ( next_node != NULL ) { if ( next_node -> ifindex == ifindex ) { node -> next = node -> next -> next ; vfree ( next_node ); node_number = node_number - 1 ; return 0 ; } } else { return - 1 ; } node = node -> next ; } return - 1 ; } \u53ef\u4ee5\u770b\u770bethtool_link_settings struct \u53ef\u4ee5\u8a2d\u5b9a\u7684\u53c3\u6578 \u7531\u65bc\u6211\u53ea\u5728\u4e4e\u8a2d\u5b9aspeed,duplex,port\u9019\u5e7e\u500b\u53c3\u6578\u6240\u4ee5,veth_get_link_ksettings,veth_set_link_ksettings\u53ea\u5be6\u505a\u9019\u5e7e\u500b,\u5982\u679c\u6709\u7279\u6b8a\u9700\u6c42\u7684\u4eba\u53ef\u4ee5\u81ea\u5df1\u52a0 \u5728linux \u539f\u59cb\u78bc linux/include/uapi/linux/ethtool.h https://github.com/torvalds/linux/blob/a2d79c7174aeb43b13020dd53d85a7aefdd9f3e5/include/uapi/linux/ethtool.h#L1848 struct ethtool_link_settings { __u32 cmd ; __u32 speed ; __u8 duplex ; __u8 port ; __u8 phy_address ; __u8 autoneg ; __u8 mdio_support ; __u8 eth_tp_mdix ; __u8 eth_tp_mdix_ctrl ; __s8 link_mode_masks_nwords ; __u8 transceiver ; __u8 reserved1 [ 3 ]; __u32 reserved [ 7 ]; __u32 link_mode_masks [ 0 ]; /* layout of link_mode_masks fields: * __u32 map_supported[link_mode_masks_nwords]; * __u32 map_advertising[link_mode_masks_nwords]; * __u32 map_lp_advertising[link_mode_masks_nwords]; */ }; #endif /* _LINUX_ETHTOOL_H */","title":"Singly linked list"},{"location":"#veth_open","text":"linux \u5728\u555f\u52d5veth \u6703\u547c\u53ebveth_open,\u4ee5ifindex\u7576\u4f5ckey,\u5728link list\u4e2d\u65b0\u589e\u4e00\u500b\u7bc0\u9ede \u585e\u5165\u6a19\u793a\u9ec3\u8272\u90e8\u4efd\u7684\u7a0b\u5f0f\u78bc static int veth_open ( struct net_device * dev ) { struct veth_priv * priv = netdev_priv ( dev ); struct net_device * peer = rtnl_dereference ( priv -> peer ); int err ; if ( ! peer ) return - ENOTCONN ; if ( priv -> _xdp_prog ) { err = veth_enable_xdp ( dev ); if ( err ) return err ; } if ( peer -> flags & IFF_UP ) { netif_carrier_on ( dev ); netif_carrier_on ( peer ); } if ( node_number == 0 ) { node = list . head = create_node ( dev -> ifindex ); } else { node -> next = create_node ( dev -> ifindex ); node = node -> next ; } node_number = node_number + 1 ; return 0 ; }","title":"veth_open"},{"location":"#veth_close","text":"linux \u5728\u95dc\u9589veth \u6703\u547c\u53ebveth_close,\u4ee5ifindex\u7576\u4f5ckey,\u5728link list\u4e2d\u522a\u9664\u8a72\u7bc0\u9ede \u585e\u5165\u6a19\u793a\u9ec3\u8272\u90e8\u4efd\u7684\u7a0b\u5f0f\u78bc static int veth_close ( struct net_device * dev ) { struct veth_priv * priv = netdev_priv ( dev ); struct net_device * peer = rtnl_dereference ( priv -> peer ); netif_carrier_off ( dev ); if ( peer ) netif_carrier_off ( peer ); if ( priv -> _xdp_prog ) veth_disable_xdp ( dev ); remove_list_node_by_key ( & list , dev -> ifindex ); return 0 ; }","title":"veth_close"},{"location":"#veth_get_link_ksettings","text":"\u9019\u88e1\u662fveth\u9a45\u52d5\u5728\u56de\u7b54\u786c\u9ad4\u53c3\u6578\u7684\u5730\u65b9 \u6539\u6389\u9019\u88e1\u7684\u7a0b\u5f0f\u78bc\u8b8a\u6210\u4e0b\u9762\u9019\u6a23 static int veth_get_link_ksettings ( struct net_device * dev , struct ethtool_link_ksettings * cmd ) { Node * node = get_node ( & list , dev -> ifindex ); cmd -> base . speed = node -> veth_ethtool . speed ; cmd -> base . duplex = node -> veth_ethtool . duplex ; cmd -> base . port = node -> veth_ethtool . port ; return 0 ; }","title":"veth_get_link_ksettings"},{"location":"#veth_ethtool_ops","text":"\u8a3b\u518aveth_ethtool_ops \u6839\u64da ethtool.h \u7684\u539f\u59cb\u78bc\u6211\u5011\u53ef\u4ee5\u77e5\u9053ethtool\u7684set_link_ksettings\u5176\u5be6\u662f\u53ef\u4ee5\u8a2d\u5b9a\u53c3\u6578\u4f46\u662fveth.c\u6c92\u6709\u5be6\u505a\u51fa\u4f86,\u6240\u4ee5\u6211\u5011\u525b\u525b\u624d\u7121\u6cd5\u8a2d\u5b9a \u6240\u4ee5\u5fc5\u9808\u586b\u5165.set_link_ksettings =veth_set_link_ksettings, \u7b49\u7b49\u5728\u5be6\u505aveth_set_link_ksettings static const struct ethtool_ops veth_ethtool_ops = { . set_link_ksettings = veth_set_link_ksettings , . get_drvinfo = veth_get_drvinfo , . get_link = ethtool_op_get_link , . get_strings = veth_get_strings , . get_sset_count = veth_get_sset_count , . get_ethtool_stats = veth_get_ethtool_stats , . get_link_ksettings = veth_get_link_ksettings , };","title":"veth_ethtool_ops"},{"location":"#veth_set_link_ksettings","text":"\u5be6\u505aveth_set_link_ksettings ethtool.h \u88e1\u9762\u6709\u898f\u5b9a\u51fd\u6578\u8f38\u5165\u578b\u614b static int veth_set_link_ksettings ( struct net_device * dev , const struct ethtool_link_ksettings * cmd ) { Node * node = get_node ( & list , dev -> ifindex ); node -> veth_ethtool . speed = cmd -> base . speed ; node -> veth_ethtool . duplex = cmd -> base . duplex ; node -> veth_ethtool . port = cmd -> base . port ; return 0 ; }","title":"veth_set_link_ksettings"},{"location":"#makefile","text":"\u65b0\u589e\u6a94\u6848\u547d\u540dMakefile \u6ce8\u610f\u8907\u88fd\u7684\u6642\u5019\u6709\u53ef\u80fdtab\u8b8a\u6210space\u5c0e\u81f4\u7121\u6cd5\u7de8\u8b6f Makefile obj-m += veth.o all : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) modules clean : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) clean","title":"\u64b0\u5bebMakefile"},{"location":"#_5","text":"\u505a\u5230\u9019\u88e1\u4f60\u6709\u5169\u500b\u6a94\u6848veth.c \u8207 Makefile \u57f7\u884c\u4e4b\u5f8c\u53ef\u4ee5\u770b\u5230\u7522\u751fveth.ko\u6a94\u6848 make \u5982\u679c\u539f\u672c\u5c31\u6709veth\u9a45\u52d5\u7a0b\u5f0f \u8acb\u522a\u9664 sudo rmmod veth \u9019\u908a\u5b89\u88dd\u9a45\u52d5\u7a0b\u5f0f sudo insmod veth.ko","title":"\u7de8\u8b6f\u9a45\u52d5\u7a0b\u5f0f"},{"location":"#_6","text":"\u555f\u52d5mininet\u4e00\u500b\u62d3\u6a38 ifconfig\u5f8c\u67e5\u8a62openvswitch\u4ea4\u63db\u6a5f\u7684interface name,\u8209\u4f8bs1-eth1 \u5148\u67e5\u8a62s1-eth1\u7684\u8cc7\u8a0a sudo ethtool s1-eth1 \u4fee\u8a72s1-eth1 post\u901f\u5ea6 sudo ethtool -s s1-eth1 speed 100 \u53ef\u4ee5\u767c\u73fe\u771f\u7684\u53ef\u4ee5\u4fee\u6539\u4e86!!","title":"\u6e2c\u8a66"},{"location":"error/","text":"\u932f\u8aa4\u6392\u89e3 \u00b6 Mininet Cannot find required executable controller \u00b6 if you get this problen Cannot find required executable controller. Please make sure that it is installed and available in your $PATH : ( /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin ) fix \u00b6 sudo apt-get install openvswitch-testcontroller sudo ln /usr/bin/ovs-testcontroller /usr/bin/controller source: https://stackoverflow.com/a/47312367 port\u885d\u7a81 \u00b6 \u5728\u5be6\u9a57\u6642\u90fd\u5728default\u8a2d\u5b9a\u4e4b\u4e0b,\u56e0\u70baryu\u555f\u52d5LISTEN\u7684ip\u70ba0.0.0.0:6653 \u4f46\u662fmininet \u9023\u7dda\u7684\u4f4d\u7f6e\u70ba127.0.0.1:6653 \u6240\u4ee5\u7121\u6cd5\u9023\u7dda Bug Please shut down the controller which is running on port 6653 \u89e3\u6c7a\u65b9\u6848\u8981\u78ba\u5be6\u6307\u5b9a\u6b63\u78baip Fix sudo mn --controller = remote,ip = 0 .0.0.0,port = 6653 miniedit\u7248\u672c\u554f\u984c \u00b6 https://github.com/mininet/mininet/blob/master/examples/miniedit.py \u76ee\u524dminiedit.py\u53ea\u652f\u63f4python2 \u555f\u52d5\u62d3\u6a38\u5361\u4f4f \u00b6 Bug *** Adding controller *** Add switches *** Add hosts *** Add links *** Starting network *** Configuring hosts h2 h1 *** Starting controllers *** Starting switches \u89e3\u6c7a\u65b9\u6848 \u00b6 \u6709\u53ef\u80fd\u662f\u5c1a\u672a\u555f\u52d5openvswitch Fix sudo ovs-vswitchd OVSDB\u9023\u7dda\u554f\u984c \u00b6 ovsdb-server \u7684\u555f\u52d5\u76e3\u807d\u4f4d\u7f6e\u8981\u8207OVSDB_ADDR \u4e00\u6a23 \u652f\u63f4\u5169\u500b\u5730\u65b9\u63a7\u5236db.sock\u8207ptcp:6641 for manjaro sudo ovsdb-server --remote = punix:/run/openvswitch/db.sock --remote = ptcp:6641 --pidfile = /run/openvswitch/ovsdb-server.pid for ubuntu sudo ovsdb-server --remote = punix:/usr/local/var/run/openvswitch/db.sock --remote = ptcp:6641 --pidfile \u5b89\u88ddovs_vsctl sudo pip3 install git+https://github.com/iwaseyusuke/python-ovs-vsctl.git from ovs_vsctl import VSCtl import time vsctl = VSCtl ( 'tcp' , '127.0.0.1' , 6641 ) def close_port ( datapath_id , port_id ): try : popen = vsctl . run ( 'del-port s' + str ( datapath_id ) + ' s' + str ( datapath_id ) + '-eth' + str ( port_id )) return popen except : return False def start_port ( datapath_id , port_id ): try : popen = vsctl . run ( 'add-port s' + str ( datapath_id ) + ' s' + str ( datapath_id ) + '-eth' + str ( port_id ) + ' -- set Interface s' + str ( datapath_id ) + '-eth' + str ( port_id ) + ' ofport_request=' + str ( port_id )) return popen except : return False close_port ( 33 , 1 ) close_port ( 33 , 2 ) time . sleep ( 10 ) start_port ( 33 , 1 ) start_port ( 33 , 2 ) METER TABLE\u8a2d\u5b9a\u554f\u984c \u00b6 Note Open vSwitch\u6709\u5169\u7a2e\u7528\u4f5c\u6a21\u5f0f\u6838\u5fc3(system)\u6a21\u5f0f\u8207user space(netdev)\u6a21\u5f0f\u904b\u4f5c\u6b64\u6a21\u5f0f\u9700\u8981\u5b89\u88ddDPDK\u8207\u7de8\u8b6fDPDK\u7248\u672c\u7684Open vSwitch datapath_types [netdev, system] \u6838\u5fc3(system) \u00b6 Open vSwitch 2.10\u624d\u958b\u59cb\u5728\u6838\u5fc3(system)\u6a21\u5f0f\u5be6\u505ameter\u4e26\u4e14Linux kernel\u7248\u672c\u8981\u9ad8\u65bc4.15\u624d\u652f\u63f4meter table http://docs.openvswitch.org/en/latest/faq/releases/ user space(netdev) \u00b6 Open vSwitch 2.7\u958b\u59cb\u5728user space(netdev)\u5be6\u505ameter,\u6240\u4ee5\u8981\u4f7f\u7528\u5fc5\u9808\u5b89\u88ddDPDK \u4f7f\u7528DPDK+Open vSwitch\u53ef\u4ee5\u8b93user space(netdev)\u6a21\u5f0f\u7684Open vSwitch\u63d0\u9ad8\u541e\u5410\u91cf mininet\u8981\u8a2d\u5b9adatapath\u70bauser\u624d\u80fd\u4f7f\u7528user space\u8f49\u767c, sudo mn --topo single,2 --switch ovs,protocols=OpenFlow13,datapath=user","title":"\u932f\u8aa4\u6392\u89e3"},{"location":"error/#_1","text":"","title":"\u932f\u8aa4\u6392\u89e3"},{"location":"error/#mininet-cannot-find-required-executable-controller","text":"if you get this problen Cannot find required executable controller. Please make sure that it is installed and available in your $PATH : ( /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin )","title":"Mininet Cannot find required executable controller"},{"location":"error/#fix","text":"sudo apt-get install openvswitch-testcontroller sudo ln /usr/bin/ovs-testcontroller /usr/bin/controller source: https://stackoverflow.com/a/47312367","title":"fix"},{"location":"error/#port","text":"\u5728\u5be6\u9a57\u6642\u90fd\u5728default\u8a2d\u5b9a\u4e4b\u4e0b,\u56e0\u70baryu\u555f\u52d5LISTEN\u7684ip\u70ba0.0.0.0:6653 \u4f46\u662fmininet \u9023\u7dda\u7684\u4f4d\u7f6e\u70ba127.0.0.1:6653 \u6240\u4ee5\u7121\u6cd5\u9023\u7dda Bug Please shut down the controller which is running on port 6653 \u89e3\u6c7a\u65b9\u6848\u8981\u78ba\u5be6\u6307\u5b9a\u6b63\u78baip Fix sudo mn --controller = remote,ip = 0 .0.0.0,port = 6653","title":"port\u885d\u7a81"},{"location":"error/#miniedit","text":"https://github.com/mininet/mininet/blob/master/examples/miniedit.py \u76ee\u524dminiedit.py\u53ea\u652f\u63f4python2","title":"miniedit\u7248\u672c\u554f\u984c"},{"location":"error/#_2","text":"Bug *** Adding controller *** Add switches *** Add hosts *** Add links *** Starting network *** Configuring hosts h2 h1 *** Starting controllers *** Starting switches","title":"\u555f\u52d5\u62d3\u6a38\u5361\u4f4f"},{"location":"error/#_3","text":"\u6709\u53ef\u80fd\u662f\u5c1a\u672a\u555f\u52d5openvswitch Fix sudo ovs-vswitchd","title":"\u89e3\u6c7a\u65b9\u6848"},{"location":"error/#ovsdb","text":"ovsdb-server \u7684\u555f\u52d5\u76e3\u807d\u4f4d\u7f6e\u8981\u8207OVSDB_ADDR \u4e00\u6a23 \u652f\u63f4\u5169\u500b\u5730\u65b9\u63a7\u5236db.sock\u8207ptcp:6641 for manjaro sudo ovsdb-server --remote = punix:/run/openvswitch/db.sock --remote = ptcp:6641 --pidfile = /run/openvswitch/ovsdb-server.pid for ubuntu sudo ovsdb-server --remote = punix:/usr/local/var/run/openvswitch/db.sock --remote = ptcp:6641 --pidfile \u5b89\u88ddovs_vsctl sudo pip3 install git+https://github.com/iwaseyusuke/python-ovs-vsctl.git from ovs_vsctl import VSCtl import time vsctl = VSCtl ( 'tcp' , '127.0.0.1' , 6641 ) def close_port ( datapath_id , port_id ): try : popen = vsctl . run ( 'del-port s' + str ( datapath_id ) + ' s' + str ( datapath_id ) + '-eth' + str ( port_id )) return popen except : return False def start_port ( datapath_id , port_id ): try : popen = vsctl . run ( 'add-port s' + str ( datapath_id ) + ' s' + str ( datapath_id ) + '-eth' + str ( port_id ) + ' -- set Interface s' + str ( datapath_id ) + '-eth' + str ( port_id ) + ' ofport_request=' + str ( port_id )) return popen except : return False close_port ( 33 , 1 ) close_port ( 33 , 2 ) time . sleep ( 10 ) start_port ( 33 , 1 ) start_port ( 33 , 2 )","title":"OVSDB\u9023\u7dda\u554f\u984c"},{"location":"error/#meter-table","text":"Note Open vSwitch\u6709\u5169\u7a2e\u7528\u4f5c\u6a21\u5f0f\u6838\u5fc3(system)\u6a21\u5f0f\u8207user space(netdev)\u6a21\u5f0f\u904b\u4f5c\u6b64\u6a21\u5f0f\u9700\u8981\u5b89\u88ddDPDK\u8207\u7de8\u8b6fDPDK\u7248\u672c\u7684Open vSwitch datapath_types [netdev, system]","title":"METER TABLE\u8a2d\u5b9a\u554f\u984c"},{"location":"error/#system","text":"Open vSwitch 2.10\u624d\u958b\u59cb\u5728\u6838\u5fc3(system)\u6a21\u5f0f\u5be6\u505ameter\u4e26\u4e14Linux kernel\u7248\u672c\u8981\u9ad8\u65bc4.15\u624d\u652f\u63f4meter table http://docs.openvswitch.org/en/latest/faq/releases/","title":"\u6838\u5fc3(system)"},{"location":"error/#user-spacenetdev","text":"Open vSwitch 2.7\u958b\u59cb\u5728user space(netdev)\u5be6\u505ameter,\u6240\u4ee5\u8981\u4f7f\u7528\u5fc5\u9808\u5b89\u88ddDPDK \u4f7f\u7528DPDK+Open vSwitch\u53ef\u4ee5\u8b93user space(netdev)\u6a21\u5f0f\u7684Open vSwitch\u63d0\u9ad8\u541e\u5410\u91cf mininet\u8981\u8a2d\u5b9adatapath\u70bauser\u624d\u80fd\u4f7f\u7528user space\u8f49\u767c, sudo mn --topo single,2 --switch ovs,protocols=OpenFlow13,datapath=user","title":"user space(netdev)"},{"location":"outnet/","text":"mininet\u7684host\u8a72\u5982\u4f55\u9023\u7dda\u5916\u7db2 \u00b6 Step 0 \u95dc\u9589\u9632\u706b\u7246 \u00b6 \u78ba\u8a8d\u9632\u706b\u7246\u662f\u5426\u555f\u52d5,\u5c31\u662f\u56e0\u70ba\u555f\u52d5\u9632\u706b\u7246\u6211\u7684veth\u7121\u6cd5\u50b3\u51faDNS\u5354\u5b9a sudo firewall-cmd --state \u5148\u66ab\u6642\u95dc\u9589 sudo systemctl stop firewalld Step1 \u555f\u52d5mn \u00b6 \u5148\u555f\u52d5mininet \u4e26\u4e14\u7528default\u7684\u62d3\u6a38\u7576\u7bc4\u4f8b sudo mn Step2 \u627ehost 1\u7684PID \u00b6 ref: http://www.haifux.org/lectures/299/netLec7.pdf \u7531\u65bcmininet \u662f\u8a2d\u5b9aNameless namespaces\u6240\u4ee5 ip netns list \u662f\u770b\u4e0d\u5230namespaces\u56e0\u70bamininet\u6c92\u6709\u547d\u540d \u6240\u4ee5\u6211\u5011\u8981\u5148\u627e\u51fa\"Nameless namespaces\" \u7684PID \u57f7\u884c\u5b8c\u6210\u5e95\u4e0b\u7684python2\u7a0b\u5f0f\u53ef\u4ee5\u770b\u5230\u8ddf\u6211\u985e\u4f3c\u7684\u8f38\u51fa,\u53ef\u4ee5\u770b\u5230mininet\u8a2d\u5b9ah1\u7684PID\u70ba9051,\u5148\u8a18\u4e0b\u8a72PID\u7b49\u7b49\u6703\u5e6b\u8a72Nameless namespaces\u547d\u540d 9051 net:[4026532791] bash --norc --noediting -is mininet:h1 9051 mnt:[4026532789] bash --norc --noediting -is mininet:h1 9053 net:[4026532853] bash --norc --noediting -is mininet:h2 9053 mnt:[4026532851] bash --norc --noediting -is mininet:h2 ref: https://www.opencloudblog.com/?p=251 \u8a72\u4f5c\u8005\u7a0b\u5f0f\u662fpython2\u6211\u6539\u70ba\u76f8\u5bb9python2\u82073\u7248\u672c \u57f7\u884c\u8981\u52a0sudo #!/usr/bin/python # # List all Namespaces (works for Ubuntu 12.04 and higher) # # (C) Ralf Trezeciak 2013-2014 # # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # import os import fnmatch if os . geteuid () != 0 : print ( \"This script must be run as root \\n Bye\" ) exit ( 1 ) def getinode ( pid , type ): link = '/proc/' + pid + '/ns/' + type ret = '' try : ret = os . readlink ( link ) except OSError as e : ret = '' pass return ret # # get the running command def getcmd ( p ): try : cmd = open ( os . path . join ( '/proc' , p , 'cmdline' ), 'rb' ) . read () if cmd == '' : cmd = open ( os . path . join ( '/proc' , p , 'comm' ), 'rb' ) . read () cmd = str ( cmd ) cmd = cmd . replace ( \" \\\\ x00\" , ' ' ) cmd = cmd . replace ( \"b'\" , ' ' ) cmd = cmd . replace ( \"'\" , ' ' ) cmd = cmd . replace ( ' \\n ' , ' ' ) return cmd except : return \"\" # # look for docker parents def getpcmd ( p ): try : f = '/proc/' + p + '/stat' arr = open ( f , 'rb' ) . read () . split () cmd = getcmd ( arr [ 3 ] ) if cmd . startswith ( '/usr/bin/docker' ): return 'docker' except : pass return '' # # get the namespaces of PID=1 # assumption: these are the namespaces supported by the system # nslist = os . listdir ( '/proc/1/ns/' ) if len ( nslist ) == 0 : print ( 'No Namespaces found for PID=1' ) exit ( 1 ) #print nslist # # get the inodes used for PID=1 # baseinode = [] for x in nslist : baseinode . append ( getinode ( '1' , x ) ) #print \"Default namespaces: \" , baseinode err = 0 ns = [] ipnlist = [] # # loop over the network namespaces created using \"ip\" # try : netns = os . listdir ( '/var/run/netns/' ) for p in netns : fd = os . open ( '/var/run/netns/' + p , os . O_RDONLY ) info = os . fstat ( fd ) os . close ( fd ) ns . append ( '-- net:[' + str ( info . st_ino ) + '] created by ip netns add ' + p ) ipnlist . append ( 'net:[' + str ( info . st_ino ) + ']' ) except : # might fail if no network namespaces are existing pass # # walk through all pids and list diffs # pidlist = fnmatch . filter ( os . listdir ( '/proc/' ), '[0123456789]*' ) #print pidlist for p in pidlist : try : pnslist = os . listdir ( '/proc/' + p + '/ns/' ) for x in pnslist : i = getinode ( p , x ) if i != '' and i not in baseinode : cmd = getcmd ( p ) pcmd = getpcmd ( p ) if pcmd != '' : cmd = '[' + pcmd + '] ' + cmd tag = '' if i in ipnlist : tag = '**' ns . append ( p + ' ' + i + tag + ' ' + cmd ) except : # might happen if a pid is destroyed during list processing pass # # print the stuff # print ( '{0:>10} {1:20} {2}' . format ( 'PID' , 'Namespace' , 'Thread/Command' )) for e in ns : x = e . split ( ' ' , 2 ) print ( '{0:>10} {1:20} {2}' . format ( x [ 0 ], x [ 1 ], x [ 2 ][: 60 ])) Step 3 namespaces\u547d\u540d \u00b6 ref: https://gist.github.com/cfra/39f4110366fa1ae9b1bddd1b47f586a3 \u9084\u8a18\u5f97\u6211\u5011PID\u70ba9051,\u73fe\u5728\u8981\u5e6b\u8a72Nameless namespaces\u547d\u540d new_namespace\u4f60\u53ef\u4ee5\u6539\u6210\u81ea\u5df1\u559c\u6b61\u7684namespaces \u672c\u7bc4\u4f8bh1\u7684namespace\u90fd\u70banew_namespace \u7db2\u5361interface\u90fd\u5047\u5b9a\u70ba:wlp3s0 \u9019\u500b9051\u8981\u6539\u6210\u4f60\u770b\u5230\u7684PID \u4f60\u53ef\u80fd\u5728/run/\u5e95\u4e0b\u6c92\u6709netns\u8cc7\u6599\u593e\u6240\u4ee5\u65b0\u589e\u4e00\u500b \u5982\u679c\u5df2\u7d93\u6709\u4e86\u5c31\u4e0d\u7528 sudo mkdir /run/netns/ \u65b0\u589e\u6a94\u6848\u8207\u639b\u8f09 sudo touch /run/netns/new_namespace sudo mount -o bind /proc/9051/ns/net /run/netns/new_namespace \u518d\u4f86\u6211\u5011\u6e2c\u8a66\u80fd\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528namespace\u76f4\u63a5\u9032\u5165h1 sudo ip netns exec new_namespace bash \u96e2\u958bh1 exit Step 4 \u958b\u59cb\u8a2d\u5b9a \u00b6 \u89e3\u6cd51 \u00b6 \u6709\u6a4b\u63a5\u7248\u672c docker\u5c31\u662f\u4f9d\u9760\u6b64\u65b9\u5f0f\u5efa\u7acb\u7db2\u8def\u9694\u96e2 \u5e95\u4e0b\u6559\u5b78\u4f86\u6e90ref: https://www.itread01.com/content/1543209484.html#2veth_pair_8 \u5efa\u7acbveth pair sudo ip link add veth-1 type veth peer name veth-2 \u628aveth-2\u585e\u5165new_namespace sudo ip link set dev veth-2 netns new_namespace \u555f\u52d5veth-1\u8207veth-2 \u4e26\u4e14\u5c0dh1\u4e5f\u5c31\u662fnew_namespace\u505a\u8a2d\u5b9a sudo ip link set dev veth-1 up sudo ip netns exec new_namespace ip link set dev veth-2 up sudo ip netns exec new_namespace ip addr add 10.0.0.1/24 dev veth-2 \u65b0\u589e\u865b\u64ec\u7db2\u6a4b sudo ip link add br0 type bridge sudo ip link set dev br0 up sudo ip addr add 10.0.0.254/24 dev br0 \u628aveth-1\u8ddfbr0\u76f8\u9023 sudo ip link set dev veth-1 master br0 \u5728new_namespace\u540d\u7a31\u7a7a\u9593\u88e1\u9762\u65b0\u589e\u9810\u8a2d\u8def\u7531 sudo ip netns exec new_namespace ip route add default via 10.0.0.254 dev veth-2 \u555f\u52d5\u8f49\u767cipv4\u6d41\u91cf echo 1 > /proc/sys/net/ipv4/ip_forward \u9019\u908a\u8981\u6ce8\u610fwlp3s0\u8981\u6539\u6210\u4f60\u53ef\u4ee5\u9023\u5916\u7db2\u7684interface \u65b0\u589eiptables FORWARD \u898f\u5247 sudo iptables -A FORWARD --out-interface wlp3s0 --in-interface br0 -j ACCEPT sudo iptables -A FORWARD --in-interface wlp3s0 --out-interface br0 -j ACCEPT \u65b0\u589eiptables NAT \u898f\u5247 sudo iptables -t nat -A POSTROUTING --source 10.0.0.0/24 --out-interface wlp3s0 -j MASQUERADE \u61f6\u4eba\u89e3\u6cd52 \u00b6 \u6c92\u6709\u6a4b\u63a5\u7248\u672c ref: https://gist.github.com/dpino/6c0dca1742093346461e11aa8f608a99 ref2: https://gist.githubusercontent.com/Lu-Yi-Hsun/708155264a436ca3e33551f26ea25630/raw/3b9f0ce358377cb5c2ecb4dd9a954df586adbe94/ns-inet.sh \u4e0b\u8f09bash\u6a94 \u00b6 wget https://gist.githubusercontent.com/Lu-Yi-Hsun/708155264a436ca3e33551f26ea25630/raw/3b9f0ce358377cb5c2ecb4dd9a954df586adbe94/ns-inet.sh \u8a2d\u5b9ans-inet.sh\u70ba\u53ef\u57f7\u884c \u00b6 chmod +x ns-inet.sh \u57f7\u884c \u00b6 \u6539\u6210\u4f60\u81ea\u5df1\u7684\u8a2d\u5b9a \u6211\u4e0a\u7db2\u7684\u7db2\u5361\u662f:wlp3s0 \u6211\u7684namespace:new_namespace Note \u6ce8\u610f\u7576\u4f7f\u7528\u6b64bash\u9032\u5165namespace\u5f8c\u4e26\u4e14\u96e2\u958bmininet\u7684xterm h1\u8a2d\u5b9a\u6703\u6062\u5fa9\u5982\u679c\u8981\u8b93xterm h1\u53ef\u4ee5\u6301\u7e8c\u4e0a\u7db2\u5c31\u5225\u96e2\u958b\u6b64\u6307\u4ee4 sudo ./ns-inet.sh wlp3s0 new_namespace \u6e2c\u8a66 \u00b6 ping www.google.com \u5728host1\u57f7\u884cchrome\u4e0a\u7db2 google-chrome-stable --no-sandbox","title":"mininet\u7684host\u8a72\u5982\u4f55\u9023\u7dda\u5916\u7db2"},{"location":"outnet/#mininethost","text":"","title":"mininet\u7684host\u8a72\u5982\u4f55\u9023\u7dda\u5916\u7db2"},{"location":"outnet/#step-0","text":"\u78ba\u8a8d\u9632\u706b\u7246\u662f\u5426\u555f\u52d5,\u5c31\u662f\u56e0\u70ba\u555f\u52d5\u9632\u706b\u7246\u6211\u7684veth\u7121\u6cd5\u50b3\u51faDNS\u5354\u5b9a sudo firewall-cmd --state \u5148\u66ab\u6642\u95dc\u9589 sudo systemctl stop firewalld","title":"Step 0 \u95dc\u9589\u9632\u706b\u7246"},{"location":"outnet/#step1-mn","text":"\u5148\u555f\u52d5mininet \u4e26\u4e14\u7528default\u7684\u62d3\u6a38\u7576\u7bc4\u4f8b sudo mn","title":"Step1 \u555f\u52d5mn"},{"location":"outnet/#step2-host-1pid","text":"ref: http://www.haifux.org/lectures/299/netLec7.pdf \u7531\u65bcmininet \u662f\u8a2d\u5b9aNameless namespaces\u6240\u4ee5 ip netns list \u662f\u770b\u4e0d\u5230namespaces\u56e0\u70bamininet\u6c92\u6709\u547d\u540d \u6240\u4ee5\u6211\u5011\u8981\u5148\u627e\u51fa\"Nameless namespaces\" \u7684PID \u57f7\u884c\u5b8c\u6210\u5e95\u4e0b\u7684python2\u7a0b\u5f0f\u53ef\u4ee5\u770b\u5230\u8ddf\u6211\u985e\u4f3c\u7684\u8f38\u51fa,\u53ef\u4ee5\u770b\u5230mininet\u8a2d\u5b9ah1\u7684PID\u70ba9051,\u5148\u8a18\u4e0b\u8a72PID\u7b49\u7b49\u6703\u5e6b\u8a72Nameless namespaces\u547d\u540d 9051 net:[4026532791] bash --norc --noediting -is mininet:h1 9051 mnt:[4026532789] bash --norc --noediting -is mininet:h1 9053 net:[4026532853] bash --norc --noediting -is mininet:h2 9053 mnt:[4026532851] bash --norc --noediting -is mininet:h2 ref: https://www.opencloudblog.com/?p=251 \u8a72\u4f5c\u8005\u7a0b\u5f0f\u662fpython2\u6211\u6539\u70ba\u76f8\u5bb9python2\u82073\u7248\u672c \u57f7\u884c\u8981\u52a0sudo #!/usr/bin/python # # List all Namespaces (works for Ubuntu 12.04 and higher) # # (C) Ralf Trezeciak 2013-2014 # # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # import os import fnmatch if os . geteuid () != 0 : print ( \"This script must be run as root \\n Bye\" ) exit ( 1 ) def getinode ( pid , type ): link = '/proc/' + pid + '/ns/' + type ret = '' try : ret = os . readlink ( link ) except OSError as e : ret = '' pass return ret # # get the running command def getcmd ( p ): try : cmd = open ( os . path . join ( '/proc' , p , 'cmdline' ), 'rb' ) . read () if cmd == '' : cmd = open ( os . path . join ( '/proc' , p , 'comm' ), 'rb' ) . read () cmd = str ( cmd ) cmd = cmd . replace ( \" \\\\ x00\" , ' ' ) cmd = cmd . replace ( \"b'\" , ' ' ) cmd = cmd . replace ( \"'\" , ' ' ) cmd = cmd . replace ( ' \\n ' , ' ' ) return cmd except : return \"\" # # look for docker parents def getpcmd ( p ): try : f = '/proc/' + p + '/stat' arr = open ( f , 'rb' ) . read () . split () cmd = getcmd ( arr [ 3 ] ) if cmd . startswith ( '/usr/bin/docker' ): return 'docker' except : pass return '' # # get the namespaces of PID=1 # assumption: these are the namespaces supported by the system # nslist = os . listdir ( '/proc/1/ns/' ) if len ( nslist ) == 0 : print ( 'No Namespaces found for PID=1' ) exit ( 1 ) #print nslist # # get the inodes used for PID=1 # baseinode = [] for x in nslist : baseinode . append ( getinode ( '1' , x ) ) #print \"Default namespaces: \" , baseinode err = 0 ns = [] ipnlist = [] # # loop over the network namespaces created using \"ip\" # try : netns = os . listdir ( '/var/run/netns/' ) for p in netns : fd = os . open ( '/var/run/netns/' + p , os . O_RDONLY ) info = os . fstat ( fd ) os . close ( fd ) ns . append ( '-- net:[' + str ( info . st_ino ) + '] created by ip netns add ' + p ) ipnlist . append ( 'net:[' + str ( info . st_ino ) + ']' ) except : # might fail if no network namespaces are existing pass # # walk through all pids and list diffs # pidlist = fnmatch . filter ( os . listdir ( '/proc/' ), '[0123456789]*' ) #print pidlist for p in pidlist : try : pnslist = os . listdir ( '/proc/' + p + '/ns/' ) for x in pnslist : i = getinode ( p , x ) if i != '' and i not in baseinode : cmd = getcmd ( p ) pcmd = getpcmd ( p ) if pcmd != '' : cmd = '[' + pcmd + '] ' + cmd tag = '' if i in ipnlist : tag = '**' ns . append ( p + ' ' + i + tag + ' ' + cmd ) except : # might happen if a pid is destroyed during list processing pass # # print the stuff # print ( '{0:>10} {1:20} {2}' . format ( 'PID' , 'Namespace' , 'Thread/Command' )) for e in ns : x = e . split ( ' ' , 2 ) print ( '{0:>10} {1:20} {2}' . format ( x [ 0 ], x [ 1 ], x [ 2 ][: 60 ]))","title":"Step2 \u627ehost 1\u7684PID"},{"location":"outnet/#step-3-namespaces","text":"ref: https://gist.github.com/cfra/39f4110366fa1ae9b1bddd1b47f586a3 \u9084\u8a18\u5f97\u6211\u5011PID\u70ba9051,\u73fe\u5728\u8981\u5e6b\u8a72Nameless namespaces\u547d\u540d new_namespace\u4f60\u53ef\u4ee5\u6539\u6210\u81ea\u5df1\u559c\u6b61\u7684namespaces \u672c\u7bc4\u4f8bh1\u7684namespace\u90fd\u70banew_namespace \u7db2\u5361interface\u90fd\u5047\u5b9a\u70ba:wlp3s0 \u9019\u500b9051\u8981\u6539\u6210\u4f60\u770b\u5230\u7684PID \u4f60\u53ef\u80fd\u5728/run/\u5e95\u4e0b\u6c92\u6709netns\u8cc7\u6599\u593e\u6240\u4ee5\u65b0\u589e\u4e00\u500b \u5982\u679c\u5df2\u7d93\u6709\u4e86\u5c31\u4e0d\u7528 sudo mkdir /run/netns/ \u65b0\u589e\u6a94\u6848\u8207\u639b\u8f09 sudo touch /run/netns/new_namespace sudo mount -o bind /proc/9051/ns/net /run/netns/new_namespace \u518d\u4f86\u6211\u5011\u6e2c\u8a66\u80fd\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528namespace\u76f4\u63a5\u9032\u5165h1 sudo ip netns exec new_namespace bash \u96e2\u958bh1 exit","title":"Step 3 namespaces\u547d\u540d"},{"location":"outnet/#step-4","text":"","title":"Step 4 \u958b\u59cb\u8a2d\u5b9a"},{"location":"outnet/#1","text":"\u6709\u6a4b\u63a5\u7248\u672c docker\u5c31\u662f\u4f9d\u9760\u6b64\u65b9\u5f0f\u5efa\u7acb\u7db2\u8def\u9694\u96e2 \u5e95\u4e0b\u6559\u5b78\u4f86\u6e90ref: https://www.itread01.com/content/1543209484.html#2veth_pair_8 \u5efa\u7acbveth pair sudo ip link add veth-1 type veth peer name veth-2 \u628aveth-2\u585e\u5165new_namespace sudo ip link set dev veth-2 netns new_namespace \u555f\u52d5veth-1\u8207veth-2 \u4e26\u4e14\u5c0dh1\u4e5f\u5c31\u662fnew_namespace\u505a\u8a2d\u5b9a sudo ip link set dev veth-1 up sudo ip netns exec new_namespace ip link set dev veth-2 up sudo ip netns exec new_namespace ip addr add 10.0.0.1/24 dev veth-2 \u65b0\u589e\u865b\u64ec\u7db2\u6a4b sudo ip link add br0 type bridge sudo ip link set dev br0 up sudo ip addr add 10.0.0.254/24 dev br0 \u628aveth-1\u8ddfbr0\u76f8\u9023 sudo ip link set dev veth-1 master br0 \u5728new_namespace\u540d\u7a31\u7a7a\u9593\u88e1\u9762\u65b0\u589e\u9810\u8a2d\u8def\u7531 sudo ip netns exec new_namespace ip route add default via 10.0.0.254 dev veth-2 \u555f\u52d5\u8f49\u767cipv4\u6d41\u91cf echo 1 > /proc/sys/net/ipv4/ip_forward \u9019\u908a\u8981\u6ce8\u610fwlp3s0\u8981\u6539\u6210\u4f60\u53ef\u4ee5\u9023\u5916\u7db2\u7684interface \u65b0\u589eiptables FORWARD \u898f\u5247 sudo iptables -A FORWARD --out-interface wlp3s0 --in-interface br0 -j ACCEPT sudo iptables -A FORWARD --in-interface wlp3s0 --out-interface br0 -j ACCEPT \u65b0\u589eiptables NAT \u898f\u5247 sudo iptables -t nat -A POSTROUTING --source 10.0.0.0/24 --out-interface wlp3s0 -j MASQUERADE","title":"\u89e3\u6cd51"},{"location":"outnet/#2","text":"\u6c92\u6709\u6a4b\u63a5\u7248\u672c ref: https://gist.github.com/dpino/6c0dca1742093346461e11aa8f608a99 ref2: https://gist.githubusercontent.com/Lu-Yi-Hsun/708155264a436ca3e33551f26ea25630/raw/3b9f0ce358377cb5c2ecb4dd9a954df586adbe94/ns-inet.sh","title":"\u61f6\u4eba\u89e3\u6cd52"},{"location":"outnet/#bash","text":"wget https://gist.githubusercontent.com/Lu-Yi-Hsun/708155264a436ca3e33551f26ea25630/raw/3b9f0ce358377cb5c2ecb4dd9a954df586adbe94/ns-inet.sh","title":"\u4e0b\u8f09bash\u6a94"},{"location":"outnet/#ns-inetsh","text":"chmod +x ns-inet.sh","title":"\u8a2d\u5b9ans-inet.sh\u70ba\u53ef\u57f7\u884c"},{"location":"outnet/#_1","text":"\u6539\u6210\u4f60\u81ea\u5df1\u7684\u8a2d\u5b9a \u6211\u4e0a\u7db2\u7684\u7db2\u5361\u662f:wlp3s0 \u6211\u7684namespace:new_namespace Note \u6ce8\u610f\u7576\u4f7f\u7528\u6b64bash\u9032\u5165namespace\u5f8c\u4e26\u4e14\u96e2\u958bmininet\u7684xterm h1\u8a2d\u5b9a\u6703\u6062\u5fa9\u5982\u679c\u8981\u8b93xterm h1\u53ef\u4ee5\u6301\u7e8c\u4e0a\u7db2\u5c31\u5225\u96e2\u958b\u6b64\u6307\u4ee4 sudo ./ns-inet.sh wlp3s0 new_namespace","title":"\u57f7\u884c"},{"location":"outnet/#_2","text":"ping www.google.com \u5728host1\u57f7\u884cchrome\u4e0a\u7db2 google-chrome-stable --no-sandbox","title":"\u6e2c\u8a66"}]}